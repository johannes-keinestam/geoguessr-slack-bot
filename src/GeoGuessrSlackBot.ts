import { cookie } from './index';
import AsynchronousSlackBot from './AsynchronousSlackBot';
import fetch from 'node-fetch';

export default class GeoGuessrSlackBot extends AsynchronousSlackBot {
    private _mapAliases: { [alias: string]: string } = {
        'diverse-world': '59a1514f17631e74145b6f47',
        'urban-world': '5b3d510b7a2b425ef47b54fd',
        'i-saw-the-sign': '5cfda2c9bc79e16dd866104d',
        'geodetective': '5d374dc141d2a43c1cd4527b',
    };

    private _map: string | undefined;
    private _roundTimeLimit: number | undefined;
    private _forbidMoving: boolean | undefined;
    private _forbidRotating: boolean | undefined;
    private _forbidZooming: boolean | undefined;

    protected get _name(): string {
        return 'GeoGuessrBot';
    }

    protected _isEnvironmentSetup(): boolean {
        return !!cookie;
    }

    protected _parseParams(params: string[]): void {
        if (!params) {
            throw new Error('Expected command parameters, but got none.');
        }

        this._roundTimeLimit = 0;
        this._forbidMoving = false;
        this._forbidRotating = false;
        this._forbidZooming = false;

        if (params.length === 0 || params.length > 5) {
            throw new Error(`Invalid command parameters: "${params.join(' ')}". Expected either "map-id" (e.g. "59a1514f17631e74145b6f47"), "map-id time-limit" (e.g. "59a1514f17631e74145b6f47 90"), or "map-id time-limit [no-move] [no-pan] [no-zoom] (e.g. "59a1514f17631e74145b6f47 60 no-move" or "59a1514f17631e74145b6f47 60 no-move no-zoom no-pan")`);
        }

        // The first parameter is always the map id or map alias.
        if (params.length >= 1) {
            this._map = params[0];
        }

        // The second parameter, if set, is always the 
        if (params.length >= 2) {
            this._roundTimeLimit = Number.parseInt(params[1]);
            if (!Number.isInteger(this._roundTimeLimit)) {
                throw new Error(`Invalid time-limit parameter: "${params[1]}". Expected integer.`);
            }
        }

        const validRules = ['no-move', 'no-pan', 'no-zoom'];
        for (const providedRule of params.slice(2)) {
            if (!validRules.includes(providedRule)) {
                throw new Error(`Invalid rule parameter: "${providedRule}". Expected one of: ${validRules.join(', ')}.`);
            }

            this._forbidMoving = this._forbidMoving || providedRule === 'no-move';
            this._forbidRotating = this._forbidRotating || providedRule === 'no-pan';
            this._forbidZooming = this._forbidZooming || providedRule === 'no-zoom';
        }
    }

    protected async _getResponse(user: string): Promise<{ [key: string]: any }> {
        if (this._map === undefined) {
            throw new Error(`No map provided.`);
        }

        const mapId = Object.keys(this._mapAliases).includes(this._map) ? this._mapAliases[this._map] : this._map;
        const timeLimit = this._roundTimeLimit ?? 0;

        const response = await fetch('https://www.geoguessr.com/api/v3/challenges', {
            headers: {
              "accept": "*/*",
              "accept-language": "en,sv;q=0.9,fi;q=0.8,nb;q=0.7",
              "content-type": "application/json",
              "sec-ch-ua": "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"",
              "sec-ch-ua-mobile": "?0",
              "sec-fetch-dest": "empty",
              "sec-fetch-mode": "cors",
              "sec-fetch-site": "same-origin",
              "cookie": cookie as string,
            },
            body: JSON.stringify({
                map: mapId,
                forbidMoving: this._forbidMoving,
                forbidRotating: this._forbidRotating,
                forbidZooming: this._forbidZooming,
                timeLimit,
            }),
            method: "POST",
        });

        const jsonResponse = await response.json();
        if (Object.keys(jsonResponse).includes('token')) {
            let settings = [];
            if (this._forbidMoving) settings.push('No moving');
            if (this._forbidZooming) settings.push('No zooming');
            if (this._forbidRotating) settings.push('No panning');
            const settingsString = settings.join(', ') || 'Moving, zooming, panning allowed';

            return {
                text: 'New GeoGuessr challenge!',
                blocks: [
                    {
                        type: 'header',
                        text: {
                            type: 'plain_text',
                            text: 'New GeoGuessr challenge! :tada:',
                            emoji: true,
                        },
                    },
                    {
                        type: 'section',
                        fields: [
                            {
                                type: 'mrkdwn',
                                text: `*Generated by:*\n${user}`,
                            },
                            {
                                type: 'mrkdwn',
                                text: `*Map:*\n${this._map}`,
                            },
                        ],
                    },
                    {
                        type: 'section',
                        fields: [
                            {
                                type: 'mrkdwn',
                                text: `*Round time limit:*\n${timeLimit === 0 ? 'None' : timeLimit + ' seconds'}`,
                            },
                            {
                                type: 'mrkdwn',
                                text: `*Settings:*\n${settingsString}`,
                            },
                        ]
                    },
                    {
                        type: 'section',
                        text: {
                            type: 'mrkdwn',
                            text: `<https://www.geoguessr.com/challenge/${jsonResponse.token}|Play now!>`,
                        }
                    }
                ]
            };
        } else {
            throw new Error(`Got invalid response back when generating GeoGuessr challenge: ${JSON.stringify(jsonResponse)}`)
        }
    }
}
